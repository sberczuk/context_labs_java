/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import static java.lang.Boolean.FALSE;

public class App {
    public String getGreeting() {
        return "Hello Context Labs!\n Product Filter demo";
    }

    public static void main(String[] args) {
        List<Product> products = new ArrayList<>();
        System.out.println(new App().getGreeting());
        Product product = new Product("", new ArrayList<>());
        product.addAttribute(new StringAttribute("Color", "Blue"));
        product.addAttribute(new BooleanAttribute("tarif", FALSE));
        product.addAttribute(new DecimalAttribute("price", new BigDecimal("100.75")));
        products.add(product);

        Product product2 = new Product("", new ArrayList<>());
        product2.addAttribute(new StringAttribute("color", "Red"));
        product2.addAttribute(new BooleanAttribute("tarif", FALSE));
        product2.addAttribute(new DecimalAttribute("price", new BigDecimal("100.99")));
        products.add(product2);


        for (Product p : products) {
            System.out.println(p);
        }
        Condition<String> colorCondition = new Condition<>("color", new EqualsOperator<String>(), "Blue");
        Condition<BigDecimal> priceCondition = new Condition<>("price", new GreaterThan<>(), new BigDecimal("10.00"));

        List<Condition> conditions = new ArrayList<>();
        conditions.add(colorCondition);
        conditions.add(priceCondition);

        System.out.println("Rule Conditions");
        for (Condition c : conditions) {
            System.out.println(c);
        }

        List<ProductRule> rules = new ArrayList<>();
        ProductRule productRule = new ProductRule(conditions, 100);
        rules.add(productRule);
        System.out.println("---");

        float maxPossibleScore = 0;
        for (Product p : products) {
            System.out.println("\n\nProcessing product " + p );
            for (ProductRule rule : rules) {
                maxPossibleScore = maxPossibleScore + rule.getScore();
                ProductRule.MatchStatus result = productRule.apply(p);
                p.setScore(result.resultScore());
                System.out.println("\n>> result "+result);
            }

        }

        // filter
        final float threshold = maxPossibleScore/2;
        System.out.println("Products with score greater than "+ threshold + ">>");
        List<Product> filteredProducts = products.stream().filter(p -> p.getScore() >= threshold).toList();
        for (Product p : filteredProducts) {
            System.out.println(p);
        }


        // calc total and average
       BigDecimal total =  filteredProducts.stream().map(Product::getPrice).reduce(BigDecimal.ZERO, BigDecimal::add);
        System.out.println("avergae price: " +total.divide(BigDecimal.valueOf(filteredProducts.size())));

    }
}
